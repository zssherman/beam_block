#!/usr/bin/env python
""" Creates a beam_block.nc from json_file.json and tif_file.tif.  """

import argparse
import json
import pyart
import numpy as np

from beam_block.config import dict_config
from beam_block.core import beam_block_json

def main():
    """ Reads all prior functions and produces pbb, cbb and flags.
    The data is then put into dictionaries and added to a radar object,
    which then the radar object is written to netCDF. """
    # Creating func and argument parser for terminal use of this file.
    parser = argparse.ArgumentParser(
        description='Create a radar object with beam block fields.')
    parser.add_argument(
        '-bw', '--beam_width', type=float, default=1.0,
        help='Half power beam width in degrees.')
    parser.add_argument(
        'json_file', type=str, help='JSON file to use for calculations.')
    parser.add_argument(
        'tif_file', type=str, help='Tif file to use as terrain data.')
    parser.add_argument(
        'out_file', type=str, help='Out file path and name to use.')
    args = parser.parse_args()

    print('')
    print('## Creating a radar object with beam block fields')
    print('')

    with open(args.json_file) as data:
        json_data = json.load(data)

    pbb_all, cbb_all = beam_block_json.json_beam_block(
        json_data, args.tif_file, beam_width=args.beam_width)

    pbb_flags, cbb_flags = beam_block_json.json_beam_block_flags(
        pbb_all, cbb_all, 0.01, 0.01)

    pbb_dict = dict_config.pbb_to_dict(pbb_all)
    cbb_dict = dict_config.cbb_to_dict(cbb_all)

    pbb_flags_dict = dict_config.pbb_flags_to_dict(pbb_flags)
    cbb_flags_dict = dict_config.cbb_flags_to_dict(cbb_flags)

    _range = np.array(
        json.loads(json_data['variables']['range']['data']))

    elevs = np.array(
        json.loads(json_data['variables']['elevation']['data']))

    azimuths = np.array(
        json.loads(json_data['variables']['azimuth']['data']))

    fixed_angle = np.array(
        np.float(json_data['variables']['fixed_angle']['data']))

    index_start = np.array(
        json.loads(
            json_data['variables']['sweep_start_ray_index']['data']))
    index_end = np.array(
        json.loads(
            json_data['variables']['sweep_end_ray_index']['data']))

    ngates = len(_range)
    nrays = len(azimuths)
    nsweeps = len(index_start)

    time = np.array(
        json.loads(json_data['variables']['time']['data']))

    lon = np.array(
        np.float(json_data['variables']['longitude']['data']))
    lat = np.array(
        np.float(json_data['variables']['latitude']['data']))
    alt = np.array(
        np.float(json_data['variables']['altitude']['data']))

    radar = pyart.testing.make_empty_ppi_radar(ngates, 1, nsweeps)

    radar.metadata = {'instrument_name': 'beam block'}

    radar.nrays = nrays
    radar.time['data'] = time
    radar.range['data'] = _range.astype('float32')

    radar.latitude['data'] = lat.astype('float64')
    radar.longitude['data'] = lon.astype('float64')
    radar.altitude['data'] = alt.astype('float64')

    radar.sweep_number['data'] = np.arange(nsweeps, dtype='int32')
    radar.sweep_start_ray_index['data'] = index_start.astype('int32')
    radar.sweep_end_ray_index['data'] = index_end.astype('int32')

    radar.fixed_angle['data'] = fixed_angle.astype('float32')
    radar.azimuth['data'] = azimuths.astype('float32')
    radar.elevation['data'] = elevs.astype('float32')

    radar.add_field('partial_beam_block',
                    pbb_dict, replace_existing=True)
    radar.add_field('cumulative_beam_block',
                    cbb_dict, replace_existing=True)
    radar.add_field('partial_beam_block_flag',
                    pbb_flags_dict, replace_existing=True)
    radar.add_field('cumulative_beam_block_flag',
                    cbb_flags_dict, replace_existing=True)

    pyart.io.write_cfradial(args.out_file, radar)

    print('')
    print('## A netCDF radar object with beam block fields has been created.')
    print('')

if __name__ == '__main__':
    main()
